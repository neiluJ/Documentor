<?php
 $reflector = $resource->getReflector();
 $methods = $reflector->getMethods();
 $properties = array();

 require_once __DIR__ .'/macros.inc.php';

 if (!$reflector->isInterface()) {
    $properties = $reflector->getProperties();
    ksort($properties, SORT_ASC);
 }

 $consts = $reflector->getConstants();
 $doc = $reflector->getDocComment();
 $parent = $reflector->getParentClass();

 $hmethods = $resource->getResolver()->heritedMethods();
 $interfaces = $resource->getResolver()->implementedInterfaces();

 ksort($methods, SORT_ASC);
?>
# <?php echo ($reflector->isInterface() ? 'Interface' : 'Class'); ?>: [<?php echo $reflector->getNamespaceName(); ?>](<?php echo $resource->url($reflector->getNamespaceName(), 'namespace', $reflector->getName()); ?>.md) \ [<?php echo $reflector->getShortName(); ?>](<?php echo $resource->url($reflector->getName(), 'class', $reflector->getName()); ?>.md) <?php if(isset($parent)): ?>extends <?php echo displayLinkOrClassname($resource, $parent, $reflector->getName()); ?> <?php endif; ?>

<?php
if(isset($doc)) {
    echo $doc->getComment();
}
?>
<?php if(count($interfaces)): ?>

### Implemented Interfaces
<?php foreach ($interfaces as $int): ?>
* <?php echo displayLinkOrClassname($resource, $int, $reflector->getName()); ?>
<?php endforeach; ?>

<?php endif; ?>

<?php if(count($consts) || count($methods) || count($hmethods) || count($properties)): ?>
Summary: <?php if(count($consts)): ?>[Constants](#constants) - <?php endif; ?><?php if(count($methods) || count($hmethods)): ?>[Methods](#methods-summary) - <?php endif; ?><?php if (isset($properties) && count($properties)): ?>[Attributes](#attributes-summary)<?php endif; ?>

<?php endif; ?>

<?php if(count($consts)): ?>
## Constants

<?php foreach ($consts as $constant): ?>
* ```<?php echo $constant->getName(); ?>```
<?php endforeach; ?>


<?php endif; ?>
<?php if(count($methods) || count($hmethods)): ?>
## Methods Summary

<?php foreach ($methods as $function): ?>
* [<?php echo $function->getShortName(); ?>](#<?php echo strtolower($function->getShortName()); ?>)
<?php endforeach; ?>
<?php foreach ($hmethods as $hclass => $hhmethods): ?>
<?php if (!count($hhmethods)) { continue; } ?>
* Herited from <?php echo displayLinkOrClassname($resource, $hclass, $reflector->getName()); ?>: <?php foreach ($hhmethods as $function): ?>[<?php echo $function->getShortName(); ?>](<?php echo $resource->url($hclass, 'class', $reflector->getName()); ?>.md#<?php echo strtolower($function->getShortName()); ?>), <?php endforeach; ?>
<?php endforeach; ?>

<?php endif; ?>
<?php if (!$reflector->isInterface() && isset($properties) && count($properties)): ?>

## Attributes Summary

<?php foreach ($properties as $prop): ?>
* <?php echo $prop->getVisibility(); ?> <?php echo ($prop->isStatic() ? 'static' : ''); ?> [$<?php echo $prop->getName(); ?>](#<?php echo strtolower($prop->getName()); ?>)
<?php endforeach; ?>
<?php endif; ?>

<?php if(count($methods)): ?>
---

## Methods

<?php

foreach ($methods as $function) {
    include __DIR__ .'/function.phtml';
}
?>

<?php endif; ?>
<?php if (!$reflector->isInterface() && isset($properties) && count($properties)): ?>

## Attributes

<?php

foreach ($properties as $property) {
    include __DIR__ .'/property.phtml';
}
?>
<?php endif; ?>
