<?php

namespace Documentor\Reflection;

/**
 * Test class for ReflectionClass.
 * Generated by PHPUnit on 2012-11-21 at 18:00:36.
 */
class ReflectionClassTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ReflectionClass
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ReflectionClass();
    }

    /**
     */
    public function testAddMethod() {
        $method = new ReflectionMethod('testMethod');
        $this->assertFalse($this->object->hasMethod('testMethod'));
        $this->object->addMethod($method);
        $this->assertTrue($this->object->hasMethod('testMethod'));
    }

    /**
     */
    public function testGetMethods()
    {
        $this->assertTrue(is_array($this->object->getMethods()));
        $this->assertEquals(0, count($this->object->getMethods()));
        $method = new ReflectionMethod('testMethod');
        $this->object->addMethod($method);
        $this->assertEquals(1, count($this->object->getMethods()));
        $this->assertEquals($method, array_pop($this->object->getMethods()));
    }

    /**
     */
    public function testGetMethod() {
        $method = new ReflectionMethod('testMethod');
        $this->object->addMethod($method);
        $this->assertEquals($method, $this->object->getMethod('testMethod'));
    }

    public function testGetMethodFail()
    {
        $this->setExpectedException('\Documentor\Exception');
        $this->object->getMethod('inexistantMethod');
    }
    
    /**
     */
    public function testAddProperty() {
        $prop = new ReflectionProperty('test');
        $this->assertFalse($this->object->hasProperty('test'));
        $this->object->addProperty($prop);
        $this->assertTrue($this->object->hasProperty('test'));
    }

    /**
     */
    public function testGetProperties()
    {
        $this->assertTrue(is_array($this->object->getProperties()));
        $this->assertEquals(0, count($this->object->getProperties()));
        $prop = new ReflectionProperty('test');
        $this->object->addProperty($prop);
        $this->assertEquals(1, count($this->object->getProperties()));
        $this->assertEquals($prop, array_pop($this->object->getProperties()));
    }

    /**
     */
    public function testGetProperty() {
        $prop = new ReflectionProperty('test');
        $this->object->addProperty($prop);
        $this->assertEquals($prop, $this->object->getProperty('test'));
    }

    public function testGetPropertyFail()
    {
        $this->setExpectedException('\Documentor\Exception');
        $this->object->getProperty('inexistantProp');
    }
    
    /**
     */
    public function testAddConstant() {
        $prop = new ReflectionConstant('test', "value");
        $this->assertFalse($this->object->hasConstant('test'));
        $this->object->addConstant($prop);
        $this->assertTrue($this->object->hasConstant('test'));
    }

    /**
     */
    public function testGetConstants()
    {
        $this->assertTrue(is_array($this->object->getConstants()));
        $this->assertEquals(0, count($this->object->getConstants()));
        $prop = new ReflectionConstant('test', "value");
        $this->object->addConstant($prop);
        $this->assertEquals(1, count($this->object->getConstants()));
        $this->assertEquals($prop, array_pop($this->object->getConstants()));
    }

    /**
     */
    public function testGetConstant() {
        $prop = new ReflectionConstant('test', "value");
        $this->object->addConstant($prop);
        $this->assertEquals($prop, $this->object->getConstant('test'));
    }

    public function testGetConstantFail()
    {
        $this->setExpectedException('\Documentor\Exception');
        $this->object->getConstant('inexistantConst');
    }
    

    /**
     */
    public function testAbstract() {
        $this->assertFalse($this->object->isAbstract());
        $this->object->setAbstract(true);
        $this->assertTrue($this->object->isAbstract());
    }

    /**
     */
    public function testFinal() {
        $this->assertFalse($this->object->isFinal());
        $this->object->setFinal(true);
        $this->assertTrue($this->object->isFinal());
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetInterfacesNames().
     */
    public function testGetInterfacesNames() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSetImplements().
     */
    public function testSetImplements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetParentClass().
     */
    public function testGetParentClass() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSetParentClass().
     */
    public function testSetParentClass() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     */
    public function testInterface() {
        $this->assertFalse($this->object->isInterface());
        $this->object->setInterface(true);
        $this->assertTrue($this->object->isInterface());
    }

    /**
     */
    public function testIsInstantiable() {
        $this->assertTrue($this->object->isInstantiable());
        $this->object->setInterface(true);
        $this->assertFalse($this->object->isInstantiable());
        $this->object->setInterface(false);
        $this->object->setAbstract(true);
        $this->assertFalse($this->object->isInstantiable());
    }

    /**
     */
    public function testGetStaticProperties() {
        $prop = new ReflectionProperty('test');
        $propStatic = new ReflectionProperty('testStatic');
        $this->object->addProperty($prop);
        $this->object->addProperty($propStatic);
        $propStatic->setDefaultValue('testValue');
        $propStatic->setStatic(true);
        
        $this->assertEquals(2, count($this->object->getProperties()));
        $this->assertEquals(1, count($this->object->getStaticProperties()));
        $this->assertEquals($propStatic, array_pop($this->object->getStaticProperties()));
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testImplementsInterface().
     */
    public function testImplementsInterface() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testIsSubclassOf().
     */
    public function testIsSubclassOf() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     */
    public function testIsCloneable() {
        $this->assertTrue($this->object->isCloneable());
        $method = new ReflectionMethod('__clone');
        $this->object->addMethod($method);
        $this->assertTrue($this->object->isCloneable());
        $method->setVisibility('private');
        $this->assertFalse($this->object->isCloneable());
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetConstructor().
     */
    public function testGetConstructor() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     */
    public function testIsInstance() {
        $this->object->setName('\Documentor\Reflection\ReflectionClass');
        $this->assertFalse($this->object->isInstance(new  \stdClass));
        $this->assertTrue($this->object->isInstance(new ReflectionClass()));
        
        $this->setExpectedException('\InvalidArgumentException');
        $this->object->isInstance("string");
    }

    /**
     */
    public function testGetStaticPropertyValue() {
        $prop = new ReflectionProperty('test');
        $propStatic = new ReflectionProperty('testStatic');
        $this->object->addProperty($prop);
        $this->object->addProperty($propStatic);
        $propStatic->setDefaultValue('testValue');
        $propStatic->setStatic(true);
        
        $this->assertFalse($this->object->getStaticPropertyValue('test'));
        $this->assertEquals('testValue', $this->object->getStaticPropertyValue('testStatic'));
    }

}